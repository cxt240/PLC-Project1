(load "simpleParser.scm")
(require racket/trace
         

(define exists?
  (lambda (l x)
    (cond
      ((null? l) #f)
      ((eq? (car l) x) #t)
      (else (exists? (cdr l) x)))))

(define getIndex
  (lambda (l x)
    (cond
      ((null? l) -1111111)
      ((eq? (car l) x) 0)
      (else (+ 1 (getIndex (cdr l) x))))))

(define getValue
  (lambda (l x)
    (cond
      ((zero? x) (car l))
      (else (getValue (cdr l) (- x 1))))))

(define setValue
  (lambda (l x)
    (cond
      ((zero? x) (cons x (cdr l)))
      (else (cons (car l) (setValue (cdr l) (- x 1)))))))